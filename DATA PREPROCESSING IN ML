{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOY3YZa70nIk/z8eYgCZxM3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/abhirampitla-13/2311cs020528/blob/main/DATA%20PREPROCESSING%20IN%20ML\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "95qXszilM5HT"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = sns.load_dataset('taxis')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 790
        },
        "id": "No3eQhELNJ0p",
        "outputId": "6e583247-bd1f-4d9a-9b77-0cd5006256b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  pickup             dropoff  passengers  distance  fare  \\\n",
              "0    2019-03-23 20:21:09 2019-03-23 20:27:24           1      1.60   7.0   \n",
              "1    2019-03-04 16:11:55 2019-03-04 16:19:00           1      0.79   5.0   \n",
              "2    2019-03-27 17:53:01 2019-03-27 18:00:25           1      1.37   7.5   \n",
              "3    2019-03-10 01:23:59 2019-03-10 01:49:51           1      7.70  27.0   \n",
              "4    2019-03-30 13:27:42 2019-03-30 13:37:14           3      2.16   9.0   \n",
              "...                  ...                 ...         ...       ...   ...   \n",
              "6428 2019-03-31 09:51:53 2019-03-31 09:55:27           1      0.75   4.5   \n",
              "6429 2019-03-31 17:38:00 2019-03-31 18:34:23           1     18.74  58.0   \n",
              "6430 2019-03-23 22:55:18 2019-03-23 23:14:25           1      4.14  16.0   \n",
              "6431 2019-03-04 10:09:25 2019-03-04 10:14:29           1      1.12   6.0   \n",
              "6432 2019-03-13 19:31:22 2019-03-13 19:48:02           1      3.85  15.0   \n",
              "\n",
              "       tip  tolls  total   color      payment            pickup_zone  \\\n",
              "0     2.15    0.0  12.95  yellow  credit card        Lenox Hill West   \n",
              "1     0.00    0.0   9.30  yellow         cash  Upper West Side South   \n",
              "2     2.36    0.0  14.16  yellow  credit card          Alphabet City   \n",
              "3     6.15    0.0  36.95  yellow  credit card              Hudson Sq   \n",
              "4     1.10    0.0  13.40  yellow  credit card           Midtown East   \n",
              "...    ...    ...    ...     ...          ...                    ...   \n",
              "6428  1.06    0.0   6.36   green  credit card      East Harlem North   \n",
              "6429  0.00    0.0  58.80   green  credit card                Jamaica   \n",
              "6430  0.00    0.0  17.30   green         cash    Crown Heights North   \n",
              "6431  0.00    0.0   6.80   green  credit card          East New York   \n",
              "6432  3.36    0.0  20.16   green  credit card            Boerum Hill   \n",
              "\n",
              "                          dropoff_zone pickup_borough dropoff_borough  \n",
              "0                  UN/Turtle Bay South      Manhattan       Manhattan  \n",
              "1                Upper West Side South      Manhattan       Manhattan  \n",
              "2                         West Village      Manhattan       Manhattan  \n",
              "3                       Yorkville West      Manhattan       Manhattan  \n",
              "4                       Yorkville West      Manhattan       Manhattan  \n",
              "...                                ...            ...             ...  \n",
              "6428              Central Harlem North      Manhattan       Manhattan  \n",
              "6429  East Concourse/Concourse Village         Queens           Bronx  \n",
              "6430                    Bushwick North       Brooklyn        Brooklyn  \n",
              "6431      East Flatbush/Remsen Village       Brooklyn        Brooklyn  \n",
              "6432                   Windsor Terrace       Brooklyn        Brooklyn  \n",
              "\n",
              "[6433 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-05476994-0a3a-4451-b3dc-7e13c23916a7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pickup</th>\n",
              "      <th>dropoff</th>\n",
              "      <th>passengers</th>\n",
              "      <th>distance</th>\n",
              "      <th>fare</th>\n",
              "      <th>tip</th>\n",
              "      <th>tolls</th>\n",
              "      <th>total</th>\n",
              "      <th>color</th>\n",
              "      <th>payment</th>\n",
              "      <th>pickup_zone</th>\n",
              "      <th>dropoff_zone</th>\n",
              "      <th>pickup_borough</th>\n",
              "      <th>dropoff_borough</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-03-23 20:21:09</td>\n",
              "      <td>2019-03-23 20:27:24</td>\n",
              "      <td>1</td>\n",
              "      <td>1.60</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.95</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Lenox Hill West</td>\n",
              "      <td>UN/Turtle Bay South</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-03-04 16:11:55</td>\n",
              "      <td>2019-03-04 16:19:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0.79</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.30</td>\n",
              "      <td>yellow</td>\n",
              "      <td>cash</td>\n",
              "      <td>Upper West Side South</td>\n",
              "      <td>Upper West Side South</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019-03-27 17:53:01</td>\n",
              "      <td>2019-03-27 18:00:25</td>\n",
              "      <td>1</td>\n",
              "      <td>1.37</td>\n",
              "      <td>7.5</td>\n",
              "      <td>2.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14.16</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Alphabet City</td>\n",
              "      <td>West Village</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-03-10 01:23:59</td>\n",
              "      <td>2019-03-10 01:49:51</td>\n",
              "      <td>1</td>\n",
              "      <td>7.70</td>\n",
              "      <td>27.0</td>\n",
              "      <td>6.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>36.95</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Hudson Sq</td>\n",
              "      <td>Yorkville West</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-03-30 13:27:42</td>\n",
              "      <td>2019-03-30 13:37:14</td>\n",
              "      <td>3</td>\n",
              "      <td>2.16</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.40</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Midtown East</td>\n",
              "      <td>Yorkville West</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6428</th>\n",
              "      <td>2019-03-31 09:51:53</td>\n",
              "      <td>2019-03-31 09:55:27</td>\n",
              "      <td>1</td>\n",
              "      <td>0.75</td>\n",
              "      <td>4.5</td>\n",
              "      <td>1.06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.36</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>East Harlem North</td>\n",
              "      <td>Central Harlem North</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6429</th>\n",
              "      <td>2019-03-31 17:38:00</td>\n",
              "      <td>2019-03-31 18:34:23</td>\n",
              "      <td>1</td>\n",
              "      <td>18.74</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>58.80</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Jamaica</td>\n",
              "      <td>East Concourse/Concourse Village</td>\n",
              "      <td>Queens</td>\n",
              "      <td>Bronx</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6430</th>\n",
              "      <td>2019-03-23 22:55:18</td>\n",
              "      <td>2019-03-23 23:14:25</td>\n",
              "      <td>1</td>\n",
              "      <td>4.14</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17.30</td>\n",
              "      <td>green</td>\n",
              "      <td>cash</td>\n",
              "      <td>Crown Heights North</td>\n",
              "      <td>Bushwick North</td>\n",
              "      <td>Brooklyn</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6431</th>\n",
              "      <td>2019-03-04 10:09:25</td>\n",
              "      <td>2019-03-04 10:14:29</td>\n",
              "      <td>1</td>\n",
              "      <td>1.12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.80</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>East New York</td>\n",
              "      <td>East Flatbush/Remsen Village</td>\n",
              "      <td>Brooklyn</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6432</th>\n",
              "      <td>2019-03-13 19:31:22</td>\n",
              "      <td>2019-03-13 19:48:02</td>\n",
              "      <td>1</td>\n",
              "      <td>3.85</td>\n",
              "      <td>15.0</td>\n",
              "      <td>3.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.16</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Boerum Hill</td>\n",
              "      <td>Windsor Terrace</td>\n",
              "      <td>Brooklyn</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6433 rows × 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05476994-0a3a-4451-b3dc-7e13c23916a7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-05476994-0a3a-4451-b3dc-7e13c23916a7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-05476994-0a3a-4451-b3dc-7e13c23916a7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-094eed2b-3d26-4129-8590-2b2377888d2a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-094eed2b-3d26-4129-8590-2b2377888d2a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-094eed2b-3d26-4129-8590-2b2377888d2a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0c08f83c-0e95-4fd2-bba1-8b194692788b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0c08f83c-0e95-4fd2-bba1-8b194692788b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6433,\n  \"fields\": [\n    {\n      \"column\": \"pickup\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-28 23:29:03\",\n        \"max\": \"2019-03-31 23:43:45\",\n        \"num_unique_values\": 6414,\n        \"samples\": [\n          \"2019-03-11 21:32:20\",\n          \"2019-03-01 11:36:49\",\n          \"2019-03-24 19:36:52\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-28 23:32:35\",\n        \"max\": \"2019-04-01 00:13:58\",\n        \"num_unique_values\": 6425,\n        \"samples\": [\n          \"2019-03-13 22:53:10\",\n          \"2019-03-12 23:25:20\",\n          \"2019-03-04 04:08:04\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passengers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8278670010117537,\n        \"min\": 0.0,\n        \"max\": 36.7,\n        \"num_unique_values\": 1079,\n        \"samples\": [\n          2.08,\n          19.43,\n          16.65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.55180426641491,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 220,\n        \"samples\": [\n          143.5,\n          16.39,\n          44.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4485595916360454,\n        \"min\": 0.0,\n        \"max\": 33.2,\n        \"num_unique_values\": 489,\n        \"samples\": [\n          3.21,\n          7.31,\n          6.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tolls\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4152673297904774,\n        \"min\": 0.0,\n        \"max\": 24.02,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.0,\n          5.76,\n          17.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.81557004106683,\n        \"min\": 1.3,\n        \"max\": 174.82,\n        \"num_unique_values\": 898,\n        \"samples\": [\n          4.8,\n          42.0,\n          50.76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"color\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"green\",\n          \"yellow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"cash\",\n          \"credit card\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_zone\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 194,\n        \"samples\": [\n          \"University Heights/Morris Heights\",\n          \"Gramercy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_zone\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 203,\n        \"samples\": [\n          \"East Chelsea\",\n          \"Astoria\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_borough\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Queens\",\n          \"Brooklyn\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_borough\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Queens\",\n          \"Staten Island\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.sample(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 730
        },
        "id": "oj-rE7p5NTv5",
        "outputId": "46dfba88-3c85-47dd-c047-ae0a2588373c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  pickup             dropoff  passengers  distance   fare  \\\n",
              "6396 2019-03-15 17:44:09 2019-03-15 18:20:25           1     11.44  41.63   \n",
              "4964 2019-03-20 13:17:37 2019-03-20 13:21:37           2      1.20   5.50   \n",
              "2334 2019-03-21 23:11:43 2019-03-21 23:20:48           1      1.38   8.00   \n",
              "6177 2019-03-20 00:01:36 2019-03-20 00:24:15           1      6.20  22.50   \n",
              "3917 2019-03-29 01:52:43 2019-03-29 02:00:08           1      1.57   7.50   \n",
              "803  2019-03-14 10:40:55 2019-03-14 10:49:03           1      1.23   7.50   \n",
              "858  2019-03-02 19:17:49 2019-03-02 19:30:05           2      1.62   9.00   \n",
              "1990 2019-03-08 07:38:10 2019-03-08 07:49:21           1      2.10   9.50   \n",
              "4541 2019-03-09 11:04:42 2019-03-09 11:13:15           2      0.98   7.00   \n",
              "1983 2019-03-03 14:23:27 2019-03-03 14:29:17           1      0.99   6.00   \n",
              "\n",
              "       tip  tolls  total   color      payment               pickup_zone  \\\n",
              "6396  0.00    0.0  42.13   green  credit card            Bushwick South   \n",
              "4964  1.76    0.0  10.56  yellow  credit card              Clinton West   \n",
              "2334  2.36    0.0  14.16  yellow  credit card       Lincoln Square East   \n",
              "6177  3.00    0.0  29.55   green  credit card  Washington Heights South   \n",
              "3917  2.26    0.0  13.56  yellow  credit card      TriBeCa/Civic Center   \n",
              "803   2.16    0.0  12.96  yellow  credit card     Upper West Side North   \n",
              "858   2.46    0.0  14.76  yellow  credit card            Midtown Center   \n",
              "1990  2.56    0.0  15.36  yellow  credit card     Upper West Side South   \n",
              "4541  2.06    0.0  12.36  yellow  credit card                  Union Sq   \n",
              "1983  2.32    0.0  11.62  yellow  credit card                      SoHo   \n",
              "\n",
              "                        dropoff_zone pickup_borough dropoff_borough  \n",
              "6396               LaGuardia Airport       Brooklyn          Queens  \n",
              "4964                    Clinton West      Manhattan       Manhattan  \n",
              "2334           Upper West Side South      Manhattan       Manhattan  \n",
              "6177                Manhattan Valley      Manhattan       Manhattan  \n",
              "3917            TriBeCa/Civic Center      Manhattan       Manhattan  \n",
              "803            Upper East Side North      Manhattan       Manhattan  \n",
              "858                         Union Sq      Manhattan       Manhattan  \n",
              "1990       Times Sq/Theatre District      Manhattan       Manhattan  \n",
              "4541  Stuy Town/Peter Cooper Village      Manhattan       Manhattan  \n",
              "1983            TriBeCa/Civic Center      Manhattan       Manhattan  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-22aba820-898b-427e-b17f-44b6c84a4c10\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pickup</th>\n",
              "      <th>dropoff</th>\n",
              "      <th>passengers</th>\n",
              "      <th>distance</th>\n",
              "      <th>fare</th>\n",
              "      <th>tip</th>\n",
              "      <th>tolls</th>\n",
              "      <th>total</th>\n",
              "      <th>color</th>\n",
              "      <th>payment</th>\n",
              "      <th>pickup_zone</th>\n",
              "      <th>dropoff_zone</th>\n",
              "      <th>pickup_borough</th>\n",
              "      <th>dropoff_borough</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6396</th>\n",
              "      <td>2019-03-15 17:44:09</td>\n",
              "      <td>2019-03-15 18:20:25</td>\n",
              "      <td>1</td>\n",
              "      <td>11.44</td>\n",
              "      <td>41.63</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>42.13</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Bushwick South</td>\n",
              "      <td>LaGuardia Airport</td>\n",
              "      <td>Brooklyn</td>\n",
              "      <td>Queens</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4964</th>\n",
              "      <td>2019-03-20 13:17:37</td>\n",
              "      <td>2019-03-20 13:21:37</td>\n",
              "      <td>2</td>\n",
              "      <td>1.20</td>\n",
              "      <td>5.50</td>\n",
              "      <td>1.76</td>\n",
              "      <td>0.0</td>\n",
              "      <td>10.56</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Clinton West</td>\n",
              "      <td>Clinton West</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2334</th>\n",
              "      <td>2019-03-21 23:11:43</td>\n",
              "      <td>2019-03-21 23:20:48</td>\n",
              "      <td>1</td>\n",
              "      <td>1.38</td>\n",
              "      <td>8.00</td>\n",
              "      <td>2.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14.16</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Lincoln Square East</td>\n",
              "      <td>Upper West Side South</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6177</th>\n",
              "      <td>2019-03-20 00:01:36</td>\n",
              "      <td>2019-03-20 00:24:15</td>\n",
              "      <td>1</td>\n",
              "      <td>6.20</td>\n",
              "      <td>22.50</td>\n",
              "      <td>3.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>29.55</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Washington Heights South</td>\n",
              "      <td>Manhattan Valley</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3917</th>\n",
              "      <td>2019-03-29 01:52:43</td>\n",
              "      <td>2019-03-29 02:00:08</td>\n",
              "      <td>1</td>\n",
              "      <td>1.57</td>\n",
              "      <td>7.50</td>\n",
              "      <td>2.26</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.56</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>TriBeCa/Civic Center</td>\n",
              "      <td>TriBeCa/Civic Center</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>803</th>\n",
              "      <td>2019-03-14 10:40:55</td>\n",
              "      <td>2019-03-14 10:49:03</td>\n",
              "      <td>1</td>\n",
              "      <td>1.23</td>\n",
              "      <td>7.50</td>\n",
              "      <td>2.16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.96</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Upper West Side North</td>\n",
              "      <td>Upper East Side North</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>858</th>\n",
              "      <td>2019-03-02 19:17:49</td>\n",
              "      <td>2019-03-02 19:30:05</td>\n",
              "      <td>2</td>\n",
              "      <td>1.62</td>\n",
              "      <td>9.00</td>\n",
              "      <td>2.46</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14.76</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Midtown Center</td>\n",
              "      <td>Union Sq</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1990</th>\n",
              "      <td>2019-03-08 07:38:10</td>\n",
              "      <td>2019-03-08 07:49:21</td>\n",
              "      <td>1</td>\n",
              "      <td>2.10</td>\n",
              "      <td>9.50</td>\n",
              "      <td>2.56</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15.36</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Upper West Side South</td>\n",
              "      <td>Times Sq/Theatre District</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4541</th>\n",
              "      <td>2019-03-09 11:04:42</td>\n",
              "      <td>2019-03-09 11:13:15</td>\n",
              "      <td>2</td>\n",
              "      <td>0.98</td>\n",
              "      <td>7.00</td>\n",
              "      <td>2.06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.36</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Union Sq</td>\n",
              "      <td>Stuy Town/Peter Cooper Village</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1983</th>\n",
              "      <td>2019-03-03 14:23:27</td>\n",
              "      <td>2019-03-03 14:29:17</td>\n",
              "      <td>1</td>\n",
              "      <td>0.99</td>\n",
              "      <td>6.00</td>\n",
              "      <td>2.32</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.62</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>SoHo</td>\n",
              "      <td>TriBeCa/Civic Center</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22aba820-898b-427e-b17f-44b6c84a4c10')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-22aba820-898b-427e-b17f-44b6c84a4c10 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-22aba820-898b-427e-b17f-44b6c84a4c10');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1e14b294-dd55-4ecf-b3b5-93fe63beea71\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1e14b294-dd55-4ecf-b3b5-93fe63beea71')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1e14b294-dd55-4ecf-b3b5-93fe63beea71 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"pickup\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-03-02 19:17:49\",\n        \"max\": \"2019-03-29 01:52:43\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"2019-03-09 11:04:42\",\n          \"2019-03-20 13:17:37\",\n          \"2019-03-14 10:40:55\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-03-02 19:30:05\",\n        \"max\": \"2019-03-29 02:00:08\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"2019-03-09 11:13:15\",\n          \"2019-03-20 13:21:37\",\n          \"2019-03-14 10:49:03\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passengers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.385988941374604,\n        \"min\": 0.98,\n        \"max\": 11.44,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.98,\n          1.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.360170235422434,\n        \"min\": 5.5,\n        \"max\": 41.63,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7.0,\n          5.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8043796781785743,\n        \"min\": 0.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2.06,\n          1.76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tolls\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.110319041015032,\n        \"min\": 10.56,\n        \"max\": 42.13,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          12.36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"color\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yellow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"credit card\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_zone\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Union Sq\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_zone\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Times Sq/Theatre District\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_borough\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Manhattan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_borough\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Manhattan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 379
        },
        "id": "H1zZrOgJNnWQ",
        "outputId": "b7f49c52-d053-4786-9735-59b4a5f77c1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               pickup             dropoff  passengers  distance  fare   tip  \\\n",
              "0 2019-03-23 20:21:09 2019-03-23 20:27:24           1      1.60   7.0  2.15   \n",
              "1 2019-03-04 16:11:55 2019-03-04 16:19:00           1      0.79   5.0  0.00   \n",
              "2 2019-03-27 17:53:01 2019-03-27 18:00:25           1      1.37   7.5  2.36   \n",
              "3 2019-03-10 01:23:59 2019-03-10 01:49:51           1      7.70  27.0  6.15   \n",
              "4 2019-03-30 13:27:42 2019-03-30 13:37:14           3      2.16   9.0  1.10   \n",
              "\n",
              "   tolls  total   color      payment            pickup_zone  \\\n",
              "0    0.0  12.95  yellow  credit card        Lenox Hill West   \n",
              "1    0.0   9.30  yellow         cash  Upper West Side South   \n",
              "2    0.0  14.16  yellow  credit card          Alphabet City   \n",
              "3    0.0  36.95  yellow  credit card              Hudson Sq   \n",
              "4    0.0  13.40  yellow  credit card           Midtown East   \n",
              "\n",
              "            dropoff_zone pickup_borough dropoff_borough  \n",
              "0    UN/Turtle Bay South      Manhattan       Manhattan  \n",
              "1  Upper West Side South      Manhattan       Manhattan  \n",
              "2           West Village      Manhattan       Manhattan  \n",
              "3         Yorkville West      Manhattan       Manhattan  \n",
              "4         Yorkville West      Manhattan       Manhattan  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1a19abf9-3574-403c-8c19-addb41ff1cd9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pickup</th>\n",
              "      <th>dropoff</th>\n",
              "      <th>passengers</th>\n",
              "      <th>distance</th>\n",
              "      <th>fare</th>\n",
              "      <th>tip</th>\n",
              "      <th>tolls</th>\n",
              "      <th>total</th>\n",
              "      <th>color</th>\n",
              "      <th>payment</th>\n",
              "      <th>pickup_zone</th>\n",
              "      <th>dropoff_zone</th>\n",
              "      <th>pickup_borough</th>\n",
              "      <th>dropoff_borough</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-03-23 20:21:09</td>\n",
              "      <td>2019-03-23 20:27:24</td>\n",
              "      <td>1</td>\n",
              "      <td>1.60</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.95</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Lenox Hill West</td>\n",
              "      <td>UN/Turtle Bay South</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-03-04 16:11:55</td>\n",
              "      <td>2019-03-04 16:19:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0.79</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.30</td>\n",
              "      <td>yellow</td>\n",
              "      <td>cash</td>\n",
              "      <td>Upper West Side South</td>\n",
              "      <td>Upper West Side South</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019-03-27 17:53:01</td>\n",
              "      <td>2019-03-27 18:00:25</td>\n",
              "      <td>1</td>\n",
              "      <td>1.37</td>\n",
              "      <td>7.5</td>\n",
              "      <td>2.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14.16</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Alphabet City</td>\n",
              "      <td>West Village</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-03-10 01:23:59</td>\n",
              "      <td>2019-03-10 01:49:51</td>\n",
              "      <td>1</td>\n",
              "      <td>7.70</td>\n",
              "      <td>27.0</td>\n",
              "      <td>6.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>36.95</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Hudson Sq</td>\n",
              "      <td>Yorkville West</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-03-30 13:27:42</td>\n",
              "      <td>2019-03-30 13:37:14</td>\n",
              "      <td>3</td>\n",
              "      <td>2.16</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.40</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Midtown East</td>\n",
              "      <td>Yorkville West</td>\n",
              "      <td>Manhattan</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a19abf9-3574-403c-8c19-addb41ff1cd9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1a19abf9-3574-403c-8c19-addb41ff1cd9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1a19abf9-3574-403c-8c19-addb41ff1cd9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-38be2506-9064-428c-8419-7238ced5744b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-38be2506-9064-428c-8419-7238ced5744b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-38be2506-9064-428c-8419-7238ced5744b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6433,\n  \"fields\": [\n    {\n      \"column\": \"pickup\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-28 23:29:03\",\n        \"max\": \"2019-03-31 23:43:45\",\n        \"num_unique_values\": 6414,\n        \"samples\": [\n          \"2019-03-11 21:32:20\",\n          \"2019-03-01 11:36:49\",\n          \"2019-03-24 19:36:52\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-28 23:32:35\",\n        \"max\": \"2019-04-01 00:13:58\",\n        \"num_unique_values\": 6425,\n        \"samples\": [\n          \"2019-03-13 22:53:10\",\n          \"2019-03-12 23:25:20\",\n          \"2019-03-04 04:08:04\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passengers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8278670010117537,\n        \"min\": 0.0,\n        \"max\": 36.7,\n        \"num_unique_values\": 1079,\n        \"samples\": [\n          2.08,\n          19.43,\n          16.65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.55180426641491,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 220,\n        \"samples\": [\n          143.5,\n          16.39,\n          44.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4485595916360454,\n        \"min\": 0.0,\n        \"max\": 33.2,\n        \"num_unique_values\": 489,\n        \"samples\": [\n          3.21,\n          7.31,\n          6.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tolls\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4152673297904774,\n        \"min\": 0.0,\n        \"max\": 24.02,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.0,\n          5.76,\n          17.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.81557004106683,\n        \"min\": 1.3,\n        \"max\": 174.82,\n        \"num_unique_values\": 898,\n        \"samples\": [\n          4.8,\n          42.0,\n          50.76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"color\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"green\",\n          \"yellow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"cash\",\n          \"credit card\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_zone\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 194,\n        \"samples\": [\n          \"University Heights/Morris Heights\",\n          \"Gramercy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_zone\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 203,\n        \"samples\": [\n          \"East Chelsea\",\n          \"Astoria\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_borough\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Queens\",\n          \"Brooklyn\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_borough\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Queens\",\n          \"Staten Island\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['color']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "023WCHlbPXly",
        "outputId": "8588aeb8-4b40-42dd-e3c0-189e8eedb096"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       yellow\n",
              "1       yellow\n",
              "2       yellow\n",
              "3       yellow\n",
              "4       yellow\n",
              "         ...  \n",
              "6428     green\n",
              "6429     green\n",
              "6430     green\n",
              "6431     green\n",
              "6432     green\n",
              "Name: color, Length: 6433, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>color</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>yellow</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>yellow</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>yellow</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>yellow</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>yellow</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6428</th>\n",
              "      <td>green</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6429</th>\n",
              "      <td>green</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6430</th>\n",
              "      <td>green</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6431</th>\n",
              "      <td>green</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6432</th>\n",
              "      <td>green</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6433 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['color'].isnull()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "VJ7A1wvXPyot",
        "outputId": "b566651b-f9f5-4073-ae79-8f4a0228a289"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       False\n",
              "1       False\n",
              "2       False\n",
              "3       False\n",
              "4       False\n",
              "        ...  \n",
              "6428    False\n",
              "6429    False\n",
              "6430    False\n",
              "6431    False\n",
              "6432    False\n",
              "Name: color, Length: 6433, dtype: bool"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>color</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6428</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6429</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6430</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6431</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6432</th>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6433 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> bool</label>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['payment'].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RHOe6BOcP6t3",
        "outputId": "b2c5031f-d619-49ec-9580-312584651fa0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "44"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "HlQAW5T0Qa-P",
        "outputId": "494f8ca6-0ee2-4ff3-e43a-386274302a3a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pickup              0\n",
              "dropoff             0\n",
              "passengers          0\n",
              "distance            0\n",
              "fare                0\n",
              "tip                 0\n",
              "tolls               0\n",
              "total               0\n",
              "color               0\n",
              "payment            44\n",
              "pickup_zone        26\n",
              "dropoff_zone       45\n",
              "pickup_borough     26\n",
              "dropoff_borough    45\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>pickup</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dropoff</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>passengers</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>distance</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tip</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tolls</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>color</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>payment</th>\n",
              "      <td>44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_zone</th>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dropoff_zone</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_borough</th>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dropoff_borough</th>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(44/6433)*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YdvekOcIQgvu",
        "outputId": "9a16b38b-d278-4829-e12f-45413e3733ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6839732628633608"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(26/6433)*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CJfTnKK4Rqch",
        "outputId": "c73db9fd-8621-40bb-c1f9-96c4af0f9bd1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4041660189647132"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(df.isnull().sum()/6433)*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "r2h5akquR03c",
        "outputId": "fe2f2afc-2c66-4257-8301-b65b57a1bb85"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pickup             0.000000\n",
              "dropoff            0.000000\n",
              "passengers         0.000000\n",
              "distance           0.000000\n",
              "fare               0.000000\n",
              "tip                0.000000\n",
              "tolls              0.000000\n",
              "total              0.000000\n",
              "color              0.000000\n",
              "payment            0.683973\n",
              "pickup_zone        0.404166\n",
              "dropoff_zone       0.699518\n",
              "pickup_borough     0.404166\n",
              "dropoff_borough    0.699518\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>pickup</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dropoff</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>passengers</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>distance</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fare</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tip</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tolls</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>color</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>payment</th>\n",
              "      <td>0.683973</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_zone</th>\n",
              "      <td>0.404166</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dropoff_zone</th>\n",
              "      <td>0.699518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_borough</th>\n",
              "      <td>0.404166</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dropoff_borough</th>\n",
              "      <td>0.699518</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop('pickup_borough',axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "tmHemmMNSOtv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(['pickup','color','payment','total'],axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "NpfEFecRTtwa",
        "outputId": "80240cf1-c379-4637-a858-a6e09ca6a8d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 dropoff  passengers  distance  fare   tip  tolls  \\\n",
              "0    2019-03-23 20:27:24           1      1.60   7.0  2.15    0.0   \n",
              "1    2019-03-04 16:19:00           1      0.79   5.0  0.00    0.0   \n",
              "2    2019-03-27 18:00:25           1      1.37   7.5  2.36    0.0   \n",
              "3    2019-03-10 01:49:51           1      7.70  27.0  6.15    0.0   \n",
              "4    2019-03-30 13:37:14           3      2.16   9.0  1.10    0.0   \n",
              "...                  ...         ...       ...   ...   ...    ...   \n",
              "6428 2019-03-31 09:55:27           1      0.75   4.5  1.06    0.0   \n",
              "6429 2019-03-31 18:34:23           1     18.74  58.0  0.00    0.0   \n",
              "6430 2019-03-23 23:14:25           1      4.14  16.0  0.00    0.0   \n",
              "6431 2019-03-04 10:14:29           1      1.12   6.0  0.00    0.0   \n",
              "6432 2019-03-13 19:48:02           1      3.85  15.0  3.36    0.0   \n",
              "\n",
              "                          dropoff_zone dropoff_borough  \n",
              "0                  UN/Turtle Bay South       Manhattan  \n",
              "1                Upper West Side South       Manhattan  \n",
              "2                         West Village       Manhattan  \n",
              "3                       Yorkville West       Manhattan  \n",
              "4                       Yorkville West       Manhattan  \n",
              "...                                ...             ...  \n",
              "6428              Central Harlem North       Manhattan  \n",
              "6429  East Concourse/Concourse Village           Bronx  \n",
              "6430                    Bushwick North        Brooklyn  \n",
              "6431      East Flatbush/Remsen Village        Brooklyn  \n",
              "6432                   Windsor Terrace        Brooklyn  \n",
              "\n",
              "[6433 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98f355dd-9e8e-465f-b2a6-3d49516112e7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>dropoff</th>\n",
              "      <th>passengers</th>\n",
              "      <th>distance</th>\n",
              "      <th>fare</th>\n",
              "      <th>tip</th>\n",
              "      <th>tolls</th>\n",
              "      <th>dropoff_zone</th>\n",
              "      <th>dropoff_borough</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-03-23 20:27:24</td>\n",
              "      <td>1</td>\n",
              "      <td>1.60</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>UN/Turtle Bay South</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-03-04 16:19:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0.79</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Upper West Side South</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019-03-27 18:00:25</td>\n",
              "      <td>1</td>\n",
              "      <td>1.37</td>\n",
              "      <td>7.5</td>\n",
              "      <td>2.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>West Village</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-03-10 01:49:51</td>\n",
              "      <td>1</td>\n",
              "      <td>7.70</td>\n",
              "      <td>27.0</td>\n",
              "      <td>6.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Yorkville West</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-03-30 13:37:14</td>\n",
              "      <td>3</td>\n",
              "      <td>2.16</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Yorkville West</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6428</th>\n",
              "      <td>2019-03-31 09:55:27</td>\n",
              "      <td>1</td>\n",
              "      <td>0.75</td>\n",
              "      <td>4.5</td>\n",
              "      <td>1.06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Central Harlem North</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6429</th>\n",
              "      <td>2019-03-31 18:34:23</td>\n",
              "      <td>1</td>\n",
              "      <td>18.74</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>East Concourse/Concourse Village</td>\n",
              "      <td>Bronx</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6430</th>\n",
              "      <td>2019-03-23 23:14:25</td>\n",
              "      <td>1</td>\n",
              "      <td>4.14</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Bushwick North</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6431</th>\n",
              "      <td>2019-03-04 10:14:29</td>\n",
              "      <td>1</td>\n",
              "      <td>1.12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>East Flatbush/Remsen Village</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6432</th>\n",
              "      <td>2019-03-13 19:48:02</td>\n",
              "      <td>1</td>\n",
              "      <td>3.85</td>\n",
              "      <td>15.0</td>\n",
              "      <td>3.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Windsor Terrace</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6433 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98f355dd-9e8e-465f-b2a6-3d49516112e7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-98f355dd-9e8e-465f-b2a6-3d49516112e7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-98f355dd-9e8e-465f-b2a6-3d49516112e7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1e48acf8-79c6-486b-947e-331fd49747a6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1e48acf8-79c6-486b-947e-331fd49747a6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1e48acf8-79c6-486b-947e-331fd49747a6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6433,\n  \"fields\": [\n    {\n      \"column\": \"dropoff\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-28 23:32:35\",\n        \"max\": \"2019-04-01 00:13:58\",\n        \"num_unique_values\": 6425,\n        \"samples\": [\n          \"2019-03-13 22:53:10\",\n          \"2019-03-12 23:25:20\",\n          \"2019-03-04 04:08:04\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passengers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8278670010117537,\n        \"min\": 0.0,\n        \"max\": 36.7,\n        \"num_unique_values\": 1079,\n        \"samples\": [\n          2.08,\n          19.43,\n          16.65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.55180426641491,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 220,\n        \"samples\": [\n          143.5,\n          16.39,\n          44.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4485595916360454,\n        \"min\": 0.0,\n        \"max\": 33.2,\n        \"num_unique_values\": 489,\n        \"samples\": [\n          3.21,\n          7.31,\n          6.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tolls\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4152673297904774,\n        \"min\": 0.0,\n        \"max\": 24.02,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.0,\n          5.76,\n          17.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_zone\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 203,\n        \"samples\": [\n          \"East Chelsea\",\n          \"Astoria\",\n          \"Westchester Village/Unionport\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_borough\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Queens\",\n          \"Staten Island\",\n          \"Brooklyn\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "_YJv5i55ULof",
        "outputId": "82bf90ec-d95b-4ac6-922e-742bac5b8106"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  pickup             dropoff  passengers  distance  fare  \\\n",
              "0    2019-03-23 20:21:09 2019-03-23 20:27:24           1      1.60   7.0   \n",
              "1    2019-03-04 16:11:55 2019-03-04 16:19:00           1      0.79   5.0   \n",
              "2    2019-03-27 17:53:01 2019-03-27 18:00:25           1      1.37   7.5   \n",
              "3    2019-03-10 01:23:59 2019-03-10 01:49:51           1      7.70  27.0   \n",
              "4    2019-03-30 13:27:42 2019-03-30 13:37:14           3      2.16   9.0   \n",
              "...                  ...                 ...         ...       ...   ...   \n",
              "6428 2019-03-31 09:51:53 2019-03-31 09:55:27           1      0.75   4.5   \n",
              "6429 2019-03-31 17:38:00 2019-03-31 18:34:23           1     18.74  58.0   \n",
              "6430 2019-03-23 22:55:18 2019-03-23 23:14:25           1      4.14  16.0   \n",
              "6431 2019-03-04 10:09:25 2019-03-04 10:14:29           1      1.12   6.0   \n",
              "6432 2019-03-13 19:31:22 2019-03-13 19:48:02           1      3.85  15.0   \n",
              "\n",
              "       tip  tolls  total   color      payment  \\\n",
              "0     2.15    0.0  12.95  yellow  credit card   \n",
              "1     0.00    0.0   9.30  yellow         cash   \n",
              "2     2.36    0.0  14.16  yellow  credit card   \n",
              "3     6.15    0.0  36.95  yellow  credit card   \n",
              "4     1.10    0.0  13.40  yellow  credit card   \n",
              "...    ...    ...    ...     ...          ...   \n",
              "6428  1.06    0.0   6.36   green  credit card   \n",
              "6429  0.00    0.0  58.80   green  credit card   \n",
              "6430  0.00    0.0  17.30   green         cash   \n",
              "6431  0.00    0.0   6.80   green  credit card   \n",
              "6432  3.36    0.0  20.16   green  credit card   \n",
              "\n",
              "                          dropoff_zone dropoff_borough  \n",
              "0                  UN/Turtle Bay South       Manhattan  \n",
              "1                Upper West Side South       Manhattan  \n",
              "2                         West Village       Manhattan  \n",
              "3                       Yorkville West       Manhattan  \n",
              "4                       Yorkville West       Manhattan  \n",
              "...                                ...             ...  \n",
              "6428              Central Harlem North       Manhattan  \n",
              "6429  East Concourse/Concourse Village           Bronx  \n",
              "6430                    Bushwick North        Brooklyn  \n",
              "6431      East Flatbush/Remsen Village        Brooklyn  \n",
              "6432                   Windsor Terrace        Brooklyn  \n",
              "\n",
              "[6433 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c398a33d-6c07-4fa6-97c7-2b0e71ddaeac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pickup</th>\n",
              "      <th>dropoff</th>\n",
              "      <th>passengers</th>\n",
              "      <th>distance</th>\n",
              "      <th>fare</th>\n",
              "      <th>tip</th>\n",
              "      <th>tolls</th>\n",
              "      <th>total</th>\n",
              "      <th>color</th>\n",
              "      <th>payment</th>\n",
              "      <th>dropoff_zone</th>\n",
              "      <th>dropoff_borough</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-03-23 20:21:09</td>\n",
              "      <td>2019-03-23 20:27:24</td>\n",
              "      <td>1</td>\n",
              "      <td>1.60</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.95</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>UN/Turtle Bay South</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-03-04 16:11:55</td>\n",
              "      <td>2019-03-04 16:19:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0.79</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.30</td>\n",
              "      <td>yellow</td>\n",
              "      <td>cash</td>\n",
              "      <td>Upper West Side South</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019-03-27 17:53:01</td>\n",
              "      <td>2019-03-27 18:00:25</td>\n",
              "      <td>1</td>\n",
              "      <td>1.37</td>\n",
              "      <td>7.5</td>\n",
              "      <td>2.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>14.16</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>West Village</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-03-10 01:23:59</td>\n",
              "      <td>2019-03-10 01:49:51</td>\n",
              "      <td>1</td>\n",
              "      <td>7.70</td>\n",
              "      <td>27.0</td>\n",
              "      <td>6.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>36.95</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Yorkville West</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-03-30 13:27:42</td>\n",
              "      <td>2019-03-30 13:37:14</td>\n",
              "      <td>3</td>\n",
              "      <td>2.16</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.40</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Yorkville West</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6428</th>\n",
              "      <td>2019-03-31 09:51:53</td>\n",
              "      <td>2019-03-31 09:55:27</td>\n",
              "      <td>1</td>\n",
              "      <td>0.75</td>\n",
              "      <td>4.5</td>\n",
              "      <td>1.06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.36</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Central Harlem North</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6429</th>\n",
              "      <td>2019-03-31 17:38:00</td>\n",
              "      <td>2019-03-31 18:34:23</td>\n",
              "      <td>1</td>\n",
              "      <td>18.74</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>58.80</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>East Concourse/Concourse Village</td>\n",
              "      <td>Bronx</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6430</th>\n",
              "      <td>2019-03-23 22:55:18</td>\n",
              "      <td>2019-03-23 23:14:25</td>\n",
              "      <td>1</td>\n",
              "      <td>4.14</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17.30</td>\n",
              "      <td>green</td>\n",
              "      <td>cash</td>\n",
              "      <td>Bushwick North</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6431</th>\n",
              "      <td>2019-03-04 10:09:25</td>\n",
              "      <td>2019-03-04 10:14:29</td>\n",
              "      <td>1</td>\n",
              "      <td>1.12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.80</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>East Flatbush/Remsen Village</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6432</th>\n",
              "      <td>2019-03-13 19:31:22</td>\n",
              "      <td>2019-03-13 19:48:02</td>\n",
              "      <td>1</td>\n",
              "      <td>3.85</td>\n",
              "      <td>15.0</td>\n",
              "      <td>3.36</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.16</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Windsor Terrace</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6433 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c398a33d-6c07-4fa6-97c7-2b0e71ddaeac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c398a33d-6c07-4fa6-97c7-2b0e71ddaeac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c398a33d-6c07-4fa6-97c7-2b0e71ddaeac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a421e1d2-abbd-48c2-8f9c-3199d0bb630a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a421e1d2-abbd-48c2-8f9c-3199d0bb630a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a421e1d2-abbd-48c2-8f9c-3199d0bb630a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5ab6a881-4a18-44fb-9372-430154ae0e74\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5ab6a881-4a18-44fb-9372-430154ae0e74 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6433,\n  \"fields\": [\n    {\n      \"column\": \"pickup\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-28 23:29:03\",\n        \"max\": \"2019-03-31 23:43:45\",\n        \"num_unique_values\": 6414,\n        \"samples\": [\n          \"2019-03-11 21:32:20\",\n          \"2019-03-01 11:36:49\",\n          \"2019-03-24 19:36:52\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-28 23:32:35\",\n        \"max\": \"2019-04-01 00:13:58\",\n        \"num_unique_values\": 6425,\n        \"samples\": [\n          \"2019-03-13 22:53:10\",\n          \"2019-03-12 23:25:20\",\n          \"2019-03-04 04:08:04\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passengers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8278670010117537,\n        \"min\": 0.0,\n        \"max\": 36.7,\n        \"num_unique_values\": 1079,\n        \"samples\": [\n          2.08,\n          19.43,\n          16.65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.55180426641491,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 220,\n        \"samples\": [\n          143.5,\n          16.39,\n          44.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4485595916360454,\n        \"min\": 0.0,\n        \"max\": 33.2,\n        \"num_unique_values\": 489,\n        \"samples\": [\n          3.21,\n          7.31,\n          6.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tolls\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4152673297904774,\n        \"min\": 0.0,\n        \"max\": 24.02,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.0,\n          5.76,\n          17.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.81557004106683,\n        \"min\": 1.3,\n        \"max\": 174.82,\n        \"num_unique_values\": 898,\n        \"samples\": [\n          4.8,\n          42.0,\n          50.76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"color\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"green\",\n          \"yellow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"cash\",\n          \"credit card\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_zone\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 203,\n        \"samples\": [\n          \"East Chelsea\",\n          \"Astoria\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_borough\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Queens\",\n          \"Staten Island\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop([2,3,6430,6432],axis=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "-Wijr7GXWrcV",
        "outputId": "e5d0d03f-de65-4cff-d1ea-560dfee53c97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  pickup             dropoff  passengers  distance  fare  \\\n",
              "0    2019-03-23 20:21:09 2019-03-23 20:27:24           1      1.60   7.0   \n",
              "1    2019-03-04 16:11:55 2019-03-04 16:19:00           1      0.79   5.0   \n",
              "4    2019-03-30 13:27:42 2019-03-30 13:37:14           3      2.16   9.0   \n",
              "5    2019-03-11 10:37:23 2019-03-11 10:47:31           1      0.49   7.5   \n",
              "6    2019-03-26 21:07:31 2019-03-26 21:17:29           1      3.65  13.0   \n",
              "...                  ...                 ...         ...       ...   ...   \n",
              "6426 2019-03-28 08:04:47 2019-03-28 08:07:46           1      0.71   4.5   \n",
              "6427 2019-03-23 18:26:09 2019-03-23 18:49:12           1      7.07  20.0   \n",
              "6428 2019-03-31 09:51:53 2019-03-31 09:55:27           1      0.75   4.5   \n",
              "6429 2019-03-31 17:38:00 2019-03-31 18:34:23           1     18.74  58.0   \n",
              "6431 2019-03-04 10:09:25 2019-03-04 10:14:29           1      1.12   6.0   \n",
              "\n",
              "       tip  tolls  total   color      payment  \\\n",
              "0     2.15    0.0  12.95  yellow  credit card   \n",
              "1     0.00    0.0   9.30  yellow         cash   \n",
              "4     1.10    0.0  13.40  yellow  credit card   \n",
              "5     2.16    0.0  12.96  yellow  credit card   \n",
              "6     2.00    0.0  18.80  yellow  credit card   \n",
              "...    ...    ...    ...     ...          ...   \n",
              "6426  0.50    0.0   5.80   green  credit card   \n",
              "6427  0.00    0.0  20.00   green         cash   \n",
              "6428  1.06    0.0   6.36   green  credit card   \n",
              "6429  0.00    0.0  58.80   green  credit card   \n",
              "6431  0.00    0.0   6.80   green  credit card   \n",
              "\n",
              "                          dropoff_zone dropoff_borough  \n",
              "0                  UN/Turtle Bay South       Manhattan  \n",
              "1                Upper West Side South       Manhattan  \n",
              "4                       Yorkville West       Manhattan  \n",
              "5                         Midtown East       Manhattan  \n",
              "6              Two Bridges/Seward Park       Manhattan  \n",
              "...                                ...             ...  \n",
              "6426             Upper West Side North       Manhattan  \n",
              "6427                 East Harlem South       Manhattan  \n",
              "6428              Central Harlem North       Manhattan  \n",
              "6429  East Concourse/Concourse Village           Bronx  \n",
              "6431      East Flatbush/Remsen Village        Brooklyn  \n",
              "\n",
              "[6429 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-791f62fc-1885-4a55-a2b5-34ccd4e89157\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pickup</th>\n",
              "      <th>dropoff</th>\n",
              "      <th>passengers</th>\n",
              "      <th>distance</th>\n",
              "      <th>fare</th>\n",
              "      <th>tip</th>\n",
              "      <th>tolls</th>\n",
              "      <th>total</th>\n",
              "      <th>color</th>\n",
              "      <th>payment</th>\n",
              "      <th>dropoff_zone</th>\n",
              "      <th>dropoff_borough</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-03-23 20:21:09</td>\n",
              "      <td>2019-03-23 20:27:24</td>\n",
              "      <td>1</td>\n",
              "      <td>1.60</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.15</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.95</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>UN/Turtle Bay South</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-03-04 16:11:55</td>\n",
              "      <td>2019-03-04 16:19:00</td>\n",
              "      <td>1</td>\n",
              "      <td>0.79</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.30</td>\n",
              "      <td>yellow</td>\n",
              "      <td>cash</td>\n",
              "      <td>Upper West Side South</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-03-30 13:27:42</td>\n",
              "      <td>2019-03-30 13:37:14</td>\n",
              "      <td>3</td>\n",
              "      <td>2.16</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1.10</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.40</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Yorkville West</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2019-03-11 10:37:23</td>\n",
              "      <td>2019-03-11 10:47:31</td>\n",
              "      <td>1</td>\n",
              "      <td>0.49</td>\n",
              "      <td>7.5</td>\n",
              "      <td>2.16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.96</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Midtown East</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2019-03-26 21:07:31</td>\n",
              "      <td>2019-03-26 21:17:29</td>\n",
              "      <td>1</td>\n",
              "      <td>3.65</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>18.80</td>\n",
              "      <td>yellow</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Two Bridges/Seward Park</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6426</th>\n",
              "      <td>2019-03-28 08:04:47</td>\n",
              "      <td>2019-03-28 08:07:46</td>\n",
              "      <td>1</td>\n",
              "      <td>0.71</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.80</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Upper West Side North</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6427</th>\n",
              "      <td>2019-03-23 18:26:09</td>\n",
              "      <td>2019-03-23 18:49:12</td>\n",
              "      <td>1</td>\n",
              "      <td>7.07</td>\n",
              "      <td>20.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.00</td>\n",
              "      <td>green</td>\n",
              "      <td>cash</td>\n",
              "      <td>East Harlem South</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6428</th>\n",
              "      <td>2019-03-31 09:51:53</td>\n",
              "      <td>2019-03-31 09:55:27</td>\n",
              "      <td>1</td>\n",
              "      <td>0.75</td>\n",
              "      <td>4.5</td>\n",
              "      <td>1.06</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.36</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>Central Harlem North</td>\n",
              "      <td>Manhattan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6429</th>\n",
              "      <td>2019-03-31 17:38:00</td>\n",
              "      <td>2019-03-31 18:34:23</td>\n",
              "      <td>1</td>\n",
              "      <td>18.74</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>58.80</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>East Concourse/Concourse Village</td>\n",
              "      <td>Bronx</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6431</th>\n",
              "      <td>2019-03-04 10:09:25</td>\n",
              "      <td>2019-03-04 10:14:29</td>\n",
              "      <td>1</td>\n",
              "      <td>1.12</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.80</td>\n",
              "      <td>green</td>\n",
              "      <td>credit card</td>\n",
              "      <td>East Flatbush/Remsen Village</td>\n",
              "      <td>Brooklyn</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6429 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-791f62fc-1885-4a55-a2b5-34ccd4e89157')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-791f62fc-1885-4a55-a2b5-34ccd4e89157 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-791f62fc-1885-4a55-a2b5-34ccd4e89157');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c808dae1-0e0a-4fd1-9897-03501002a25f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c808dae1-0e0a-4fd1-9897-03501002a25f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c808dae1-0e0a-4fd1-9897-03501002a25f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6429,\n  \"fields\": [\n    {\n      \"column\": \"pickup\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-28 23:29:03\",\n        \"max\": \"2019-03-31 23:43:45\",\n        \"num_unique_values\": 6410,\n        \"samples\": [\n          \"2019-03-22 07:33:15\",\n          \"2019-03-02 15:59:53\",\n          \"2019-03-13 15:56:18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-28 23:32:35\",\n        \"max\": \"2019-04-01 00:13:58\",\n        \"num_unique_values\": 6421,\n        \"samples\": [\n          \"2019-03-05 15:11:01\",\n          \"2019-03-11 10:04:33\",\n          \"2019-03-18 17:49:05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passengers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8285189154734858,\n        \"min\": 0.0,\n        \"max\": 36.7,\n        \"num_unique_values\": 1079,\n        \"samples\": [\n          19.2,\n          4.68,\n          25.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.553803458314746,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 220,\n        \"samples\": [\n          143.5,\n          16.39,\n          44.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4485791310785667,\n        \"min\": 0.0,\n        \"max\": 33.2,\n        \"num_unique_values\": 489,\n        \"samples\": [\n          3.21,\n          5.56,\n          6.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tolls\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4156843383373985,\n        \"min\": 0.0,\n        \"max\": 24.02,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.0,\n          5.76,\n          17.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.817824933152282,\n        \"min\": 1.3,\n        \"max\": 174.82,\n        \"num_unique_values\": 898,\n        \"samples\": [\n          4.8,\n          42.0,\n          50.76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"color\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"green\",\n          \"yellow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"cash\",\n          \"credit card\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_zone\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 203,\n        \"samples\": [\n          \"Kips Bay\",\n          \"Manhattan Valley\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_borough\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Queens\",\n          \"Staten Island\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# If you're using a Jupyter notebook, uncomment the line below\n",
        "# %matplotlib inline\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from sklearn import datasets, linear_model\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Load the diabetes dataset\n",
        "diabetes = datasets.load_diabetes()\n",
        "X = diabetes.data[:, np.newaxis, 2]\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train = X[:-30]\n",
        "X_test = X[-30:]\n",
        "y_train = diabetes.target[:-30]\n",
        "y_test = diabetes.target[-30:]\n",
        "\n",
        "# Create a linear regression model\n",
        "regr = linear_model.LinearRegression()\n",
        "regr.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions\n",
        "y_pred = regr.predict(X_test)\n",
        "\n",
        "# Print coefficients and performance metrics\n",
        "print('Coefficients: \\n', regr.coef_)\n",
        "print(\"Mean squared error: %.2f\" % mean_squared_error(y_test, y_pred))\n",
        "print('Variance score: %.2f' % r2_score(y_test, y_pred))\n",
        "\n",
        "# Plot the results\n",
        "plt.scatter(X_test, y_test, color='black')\n",
        "plt.plot(X_test, y_pred, color='blue', linewidth=3)\n",
        "plt.xticks(())\n",
        "plt.yticks(())\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "frcNhnsYXR78",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "outputId": "6aed0a46-1264-46c9-e81f-492f8bae8d55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: \n",
            " [941.43097333]\n",
            "Mean squared error: 3035.06\n",
            "Variance score: 0.41\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas\n",
        "import numpy as nm\n",
        "import matplotlib.pyplot as mtp\n",
        "import pandas as pd # Changed to pd from ps\n",
        "# import da  # This line is commented out as it's likely a typo and causing the error\n",
        "\n",
        "# Load the dataset\n",
        "data_set = pd.read_csv('Salary_Data.csv') #Using the defined alias\n",
        "\n",
        "# Extract features and target variable\n",
        "x = data_set.iloc[:, :-1].values  # Assuming the last column is the target\n",
        "y = data_set.iloc[:, -1].values    # Assuming the last column is the target\n",
        "\n",
        "# Splitting the dataset into training and test set\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1/3, random_state=0)\n",
        "\n",
        "# Fitting the Simple Linear Regression model to the training dataset\n",
        "from sklearn.linear_model import LinearRegression\n",
        "regressor = LinearRegression()\n",
        "regressor.fit(x_train, y_train)\n",
        "\n",
        "# Prediction of Test and Training set results\n",
        "y_pred = regressor.predict(x_test)\n",
        "x_pred = regressor.predict(x_train)\n",
        "\n",
        "# Visualizing the Training set results\n",
        "mtp.scatter(x_train, y_train, color=\"green\")\n",
        "mtp.plot(x_train, x_pred, color=\"red\")\n",
        "mtp.title(\"Salary vs Experience (Training Dataset)\")\n",
        "mtp.xlabel(\"Years of Experience\")\n",
        "mtp.ylabel(\"Salary (In Rupees)\")\n",
        "mtp.show()\n",
        "\n",
        "# Visualizing the Test set results\n",
        "mtp.scatter(x_test, y_test, color=\"blue\")\n",
        "mtp.plot(x_train, x_pred, color=\"red\")\n",
        "mtp.title(\"Salary vs Experience (Test Dataset)\")\n",
        "mtp.xlabel(\"Years of Experience\")\n",
        "mtp.ylabel(\"Salary (In Rupees)\")\n",
        "mtp.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 515
        },
        "id": "BljSDoncIhR7",
        "outputId": "f4eda230-cff7-40d2-8a7e-c1ca502c24c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'Salary_Data.csv'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-11-03476766aa9e>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Load the dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mdata_set\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Salary_Data.csv'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#Using the defined alias\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Extract features and target variable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'Salary_Data.csv'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as nm\n",
        "import matplotlib.pyplot as mtp\n",
        "\n",
        "\n",
        "# Load the dataset\n",
        "# If 'Salary_Data.csv' is not in the same directory, provide the full path:\n",
        "# For example: data_set = pd.read_csv('/path/to/your/file/Salary_Data.csv')\n",
        "# Or if it's in a subfolder named \"data\": data_set = pd.read_csv('data/Salary_Data.csv')\n",
        "data_set = pd.read_csv('Salary_Data.csv')\n",
        "\n",
        "# ... (rest of your code)\n"
      ],
      "metadata": {
        "id": "7sHaqKdkMLgL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "# Sample data creation (you can replace this with your own dataset)\n",
        "data = {\n",
        "    'YearsExperience': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n",
        "    'Salary': [40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000, 80000, 85000]\n",
        "}\n",
        "\n",
        "# Create a DataFrame\n",
        "data_set = pd.DataFrame(data)\n",
        "\n",
        "# Extract features and target variable\n",
        "X = data_set[['YearsExperience']].values  # Features\n",
        "y = data_set['Salary'].values              # Target variable\n",
        "\n",
        "# Splitting the dataset into training and test set\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n",
        "\n",
        "# Fitting the Simple Linear Regression model to the training dataset\n",
        "regressor = LinearRegression()\n",
        "regressor.fit(X_train, y_train)\n",
        "\n",
        "# Making predictions on the test set\n",
        "y_pred = regressor.predict(X_test)\n",
        "\n",
        "# Calculating the coefficient of determination (R^2)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Output the result\n",
        "print(f'Coefficient of Determination (R^2): {r2:.4f}')\n",
        "\n",
        "# Visualizing the results\n",
        "plt.scatter(X_train, y_train, color='green', label='Training data')\n",
        "plt.scatter(X_test, y_test, color='blue', label='Test data')\n",
        "plt.plot(X_train, regressor.predict(X_train), color='red', label='Regression line')\n",
        "plt.title('Salary vs Experience')\n",
        "plt.xlabel('Years of Experience')\n",
        "plt.ylabel('Salary (In Rupees)')\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "R-mYZ2U4OGmH",
        "outputId": "270d1b43-d3ae-4d2c-cc9e-799290354e67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficient of Determination (R^2): 1.0000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from skleran.datasets\n",
        "import make_classification\n",
        "X,y =\n",
        "make_classification(\n",
        "    n_feature=6, n_classes=3\n",
        "    n_sample=800\n",
        "    n_informative=2,\n",
        "    random_state=1,\n",
        "    n__cluster_per_class=1,\n",
        ")\n",
        "import matplotlib.pyplot\n",
        "as plt plt.scatter(X[:,0],\n",
        "X[:,1], c=y,\n",
        "marker=\"*\");\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=125)\n",
        "from sklearn.navie_bayes import GaussianNB"
      ],
      "metadata": {
        "id": "Rg3eLDNpOkmJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import make_classification\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split # Import train_test_split\n",
        "\n",
        "X, y = make_classification(\n",
        "    n_features=6, n_classes=3,\n",
        "    n_samples=800,\n",
        "    n_informative=2,\n",
        "    random_state=1,\n",
        "    n_clusters_per_class=1,\n",
        ")\n",
        "plt.scatter(X[:, 0], X[:, 1], c=y, marker=\"*\")\n",
        "plt.show()\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=125)\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "model = GaussianNB()\n",
        "model.fit(X_train, y_train)\n",
        "predicted = model.predict([X_test[6]])\n",
        "print(\"Actual Value:\",  y_test[6])\n",
        "print(\"Predicted Value:\", predicted[0])\n",
        "from sklearn.metrics import ( accuracy_score, confusion_matrix, ConfusionMatrixDisplay, f1_score,\n",
        ")\n",
        "\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "accuray = accuracy_score(y_pred, y_test)\n",
        "f1 = f1_score(y_pred, y_test, average=\"weighted\")\n",
        "print(\"Accuary\", accuray)\n",
        "print(\"F1 Score\", f1)\n",
        "cm = confusion_matrix(y_pred, y_test)\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
        "disp.plot()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 931
        },
        "id": "CYZNA9HxY-Lo",
        "outputId": "58004f6d-8bc3-4260-e877-31ee6c7abc62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Actual Value: 0\n",
            "Predicted Value: 0\n",
            "Accuary 0.8484848484848485\n",
            "F1 Score 0.8491119695890328\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VaQ1-Dr-YsQt",
        "outputId": "ab9ff89f-f243-471c-d8a7-29dda4562911"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "pd.read_csv('/content/loans.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "RNHDISNwb0qn",
        "outputId": "ea844f88-b3d2-4009-e3fa-bde89f65e868"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     client_id loan_type  loan_amount  repaid  loan_id  loan_start  \\\n",
              "0        46109      home        13672       0    10243  2002-04-16   \n",
              "1        46109    credit         9794       0    10984  2003-10-21   \n",
              "2        46109      home        12734       1    10990  2006-02-01   \n",
              "3        46109      cash        12518       1    10596  2010-12-08   \n",
              "4        46109    credit        14049       1    11415  2010-07-07   \n",
              "..         ...       ...          ...     ...      ...         ...   \n",
              "438      26945     other        12963       0    10330  2001-11-26   \n",
              "439      26945    credit         1728       1    10248  2004-01-27   \n",
              "440      26945     other         9329       0    10154  2001-12-17   \n",
              "441      26945      home         4197       0    10333  2003-10-16   \n",
              "442      26945      home         3643       0    11434  2010-03-24   \n",
              "\n",
              "       loan_end  rate  \n",
              "0    2003-12-20  2.15  \n",
              "1    2005-07-17  1.25  \n",
              "2    2007-07-05  0.68  \n",
              "3    2013-05-05  1.24  \n",
              "4    2012-05-21  3.13  \n",
              "..          ...   ...  \n",
              "438  2004-06-11  2.46  \n",
              "439  2005-06-21  5.27  \n",
              "440  2004-07-22  5.65  \n",
              "441  2005-07-10  4.50  \n",
              "442  2011-12-22  0.13  \n",
              "\n",
              "[443 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8cbb0791-3aa2-455a-be04-4776494a5327\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>client_id</th>\n",
              "      <th>loan_type</th>\n",
              "      <th>loan_amount</th>\n",
              "      <th>repaid</th>\n",
              "      <th>loan_id</th>\n",
              "      <th>loan_start</th>\n",
              "      <th>loan_end</th>\n",
              "      <th>rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>46109</td>\n",
              "      <td>home</td>\n",
              "      <td>13672</td>\n",
              "      <td>0</td>\n",
              "      <td>10243</td>\n",
              "      <td>2002-04-16</td>\n",
              "      <td>2003-12-20</td>\n",
              "      <td>2.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>46109</td>\n",
              "      <td>credit</td>\n",
              "      <td>9794</td>\n",
              "      <td>0</td>\n",
              "      <td>10984</td>\n",
              "      <td>2003-10-21</td>\n",
              "      <td>2005-07-17</td>\n",
              "      <td>1.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46109</td>\n",
              "      <td>home</td>\n",
              "      <td>12734</td>\n",
              "      <td>1</td>\n",
              "      <td>10990</td>\n",
              "      <td>2006-02-01</td>\n",
              "      <td>2007-07-05</td>\n",
              "      <td>0.68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>46109</td>\n",
              "      <td>cash</td>\n",
              "      <td>12518</td>\n",
              "      <td>1</td>\n",
              "      <td>10596</td>\n",
              "      <td>2010-12-08</td>\n",
              "      <td>2013-05-05</td>\n",
              "      <td>1.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>46109</td>\n",
              "      <td>credit</td>\n",
              "      <td>14049</td>\n",
              "      <td>1</td>\n",
              "      <td>11415</td>\n",
              "      <td>2010-07-07</td>\n",
              "      <td>2012-05-21</td>\n",
              "      <td>3.13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>438</th>\n",
              "      <td>26945</td>\n",
              "      <td>other</td>\n",
              "      <td>12963</td>\n",
              "      <td>0</td>\n",
              "      <td>10330</td>\n",
              "      <td>2001-11-26</td>\n",
              "      <td>2004-06-11</td>\n",
              "      <td>2.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>439</th>\n",
              "      <td>26945</td>\n",
              "      <td>credit</td>\n",
              "      <td>1728</td>\n",
              "      <td>1</td>\n",
              "      <td>10248</td>\n",
              "      <td>2004-01-27</td>\n",
              "      <td>2005-06-21</td>\n",
              "      <td>5.27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>440</th>\n",
              "      <td>26945</td>\n",
              "      <td>other</td>\n",
              "      <td>9329</td>\n",
              "      <td>0</td>\n",
              "      <td>10154</td>\n",
              "      <td>2001-12-17</td>\n",
              "      <td>2004-07-22</td>\n",
              "      <td>5.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>441</th>\n",
              "      <td>26945</td>\n",
              "      <td>home</td>\n",
              "      <td>4197</td>\n",
              "      <td>0</td>\n",
              "      <td>10333</td>\n",
              "      <td>2003-10-16</td>\n",
              "      <td>2005-07-10</td>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>442</th>\n",
              "      <td>26945</td>\n",
              "      <td>home</td>\n",
              "      <td>3643</td>\n",
              "      <td>0</td>\n",
              "      <td>11434</td>\n",
              "      <td>2010-03-24</td>\n",
              "      <td>2011-12-22</td>\n",
              "      <td>0.13</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>443 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8cbb0791-3aa2-455a-be04-4776494a5327')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8cbb0791-3aa2-455a-be04-4776494a5327 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8cbb0791-3aa2-455a-be04-4776494a5327');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4bf4aca8-2351-48de-846b-8493a65deb92\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4bf4aca8-2351-48de-846b-8493a65deb92')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4bf4aca8-2351-48de-846b-8493a65deb92 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 443,\n  \"fields\": [\n    {\n      \"column\": \"client_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7768,\n        \"min\": 25707,\n        \"max\": 49624,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          35214,\n          49068,\n          46109\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"credit\",\n          \"other\",\n          \"home\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4172,\n        \"min\": 559,\n        \"max\": 14971,\n        \"num_unique_values\": 438,\n        \"samples\": [\n          9349,\n          2569,\n          6232\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"repaid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 581,\n        \"min\": 10009,\n        \"max\": 11991,\n        \"num_unique_values\": 443,\n        \"samples\": [\n          11067,\n          10285\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan_start\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 430,\n        \"samples\": [\n          \"2002-07-14\",\n          \"2005-08-24\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan_end\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 428,\n        \"samples\": [\n          \"2004-05-01\",\n          \"2008-05-16\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3971676425428288,\n        \"min\": 0.01,\n        \"max\": 12.62,\n        \"num_unique_values\": 336,\n        \"samples\": [\n          2.23,\n          4.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "file_path = '/content/loans.csv'\n",
        "data = pd.read_csv(file_path)\n",
        "\n",
        "\n",
        "print(\"Dataset Preview:\")\n",
        "print(data.head())\n",
        "print(\"\\nMissing Values:\")\n",
        "print(data.isnull().sum())\n",
        "\n",
        "\n",
        "data = data.dropna()\n",
        "\n",
        "\n",
        "data = pd.get_dummies(data, columns=['loan_type'], drop_first=True)\n",
        "\n",
        "\n",
        "X = data.drop(columns=['repaid', 'loan_id', 'loan_start', 'loan_end'])\n",
        "y = data['repaid']\n",
        "\n",
        "\n",
        "print(f\"\\nMissing Values in X: {X.isnull().sum().sum()}\")\n",
        "print(f\"Missing Values in y: {y.isnull().sum()}\")\n",
        "\n",
        "\n",
        "X.fillna(0, inplace=True)\n",
        "y.fillna(0, inplace=True)\n",
        "\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "model = GaussianNB()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Calculate accuracy and evaluate the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "print(\"\\nModel Evaluation:\")\n",
        "print(f\"Accuracy: {accuracy:.2f}\")\n",
        "print(\"\\nConfusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "# Visualize the confusion matrix\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=['Not Repaid', 'Repaid'], yticklabels=['Not Repaid', 'Repaid'])\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "rvUR4OAydZeg",
        "outputId": "b16c70ae-814b-4271-c08c-a83008d10269"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset Preview:\n",
            "   client_id loan_type  loan_amount  repaid  loan_id  loan_start    loan_end  \\\n",
            "0      46109      home        13672       0    10243  2002-04-16  2003-12-20   \n",
            "1      46109    credit         9794       0    10984  2003-10-21  2005-07-17   \n",
            "2      46109      home        12734       1    10990  2006-02-01  2007-07-05   \n",
            "3      46109      cash        12518       1    10596  2010-12-08  2013-05-05   \n",
            "4      46109    credit        14049       1    11415  2010-07-07  2012-05-21   \n",
            "\n",
            "   rate  \n",
            "0  2.15  \n",
            "1  1.25  \n",
            "2  0.68  \n",
            "3  1.24  \n",
            "4  3.13  \n",
            "\n",
            "Missing Values:\n",
            "client_id      0\n",
            "loan_type      0\n",
            "loan_amount    0\n",
            "repaid         0\n",
            "loan_id        0\n",
            "loan_start     0\n",
            "loan_end       0\n",
            "rate           0\n",
            "dtype: int64\n",
            "\n",
            "Missing Values in X: 0\n",
            "Missing Values in y: 0\n",
            "\n",
            "Model Evaluation:\n",
            "Accuracy: 0.48\n",
            "\n",
            "Confusion Matrix:\n",
            "[[13 17]\n",
            " [29 30]]\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.31      0.43      0.36        30\n",
            "           1       0.64      0.51      0.57        59\n",
            "\n",
            "    accuracy                           0.48        89\n",
            "   macro avg       0.47      0.47      0.46        89\n",
            "weighted avg       0.53      0.48      0.50        89\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "!pip install scikit-fuzzy\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import make_blobs\n",
        "from sklearn.model_selection import train_test_split\n",
        "import skfuzzy as fuzz\n",
        "\n",
        "# Generate synthetic data\n",
        "X, _ = make_blobs(n_features=2, n_samples=800, centers=3, random_state=42)\n",
        "\n",
        "# Plot the dataset\n",
        "plt.scatter(X[:, 0], X[:, 1], marker=\"*\")\n",
        "plt.title(\"Generated Data Points\")\n",
        "plt.show()\n",
        "\n",
        "# Train-Test Split\n",
        "X_train, X_test = train_test_split(X, test_size=0.33, random_state=125)\n",
        "\n",
        "# Number of clusters\n",
        "n_clusters = 3\n",
        "\n",
        "# Perform Fuzzy C-Means clustering\n",
        "cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(\n",
        "    X_train.T, c=n_clusters, m=2.0, error=0.005, maxiter=1000, init=None\n",
        ")\n",
        "\n",
        "# Predict cluster membership for test data\n",
        "u_test, _, _, _, _, _ = fuzz.cluster.cmeans_predict(\n",
        "    X_test.T, cntr, m=2.0, error=0.005, maxiter=1000\n",
        ")\n",
        "\n",
        "# Find the most probable cluster for the 6th test point\n",
        "predicted_cluster = u_test[:, 6].argmax()\n",
        "print(\"Predicted Cluster:\", predicted_cluster)\n",
        "\n",
        "# Evaluate the clustering performance using the fuzzy partition coefficient (FPC)\n",
        "print(\"Fuzzy Partition Coefficient (FPC):\", fpc)\n",
        "\n",
        "# Visualize the clusters and centroids\n",
        "plt.figure(figsize=(8, 6))\n",
        "for j in range(n_clusters):\n",
        "    plt.scatter(X_train[u[j] > 0.5, 0], X_train[u[j] > 0.5, 1], label=f\"Cluster {j}\")\n",
        "\n",
        "plt.scatter(cntr[:, 0], cntr[:, 1], c='red', marker='X', s=100, label=\"Centroids\")\n",
        "plt.legend()\n",
        "plt.title(\"Fuzzy C-Means Clustering\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "TjHwOW8IZ7Te",
        "outputId": "4b8e6fdf-3adb-4fe2-e1bb-0d2b551d6aa0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-fuzzy\n",
            "  Downloading scikit_fuzzy-0.5.0-py2.py3-none-any.whl.metadata (2.6 kB)\n",
            "Downloading scikit_fuzzy-0.5.0-py2.py3-none-any.whl (920 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m920.8/920.8 kB\u001b[0m \u001b[31m9.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: scikit-fuzzy\n",
            "Successfully installed scikit-fuzzy-0.5.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Cluster: 2\n",
            "Fuzzy Partition Coefficient (FPC): 0.9541304883048614\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import make_blobs\n",
        "import skfuzzy as fuzz\n",
        "# Generate synthetic dataset\n",
        "n_samples = 300\n",
        "n_features = 2\n",
        "n_clusters = 3\n",
        "random_state = 42\n",
        "# Creating a dataset\n",
        "X, _ = make_blobs(n_samples=n_samples, centers=n_clusters, n_features=n_features,\n",
        "random_state=random_state)\n",
        "# Visualize the dataset\n",
        "plt.scatter(X[:, 0], X[:, 1], c='blue', marker='o', edgecolor='k')\n",
        "plt.title(\"Generated Data Points\")\n",
        "plt.xlabel(\"Feature 1\")\n",
        "plt.ylabel(\"Feature 2\")\n",
        "plt.grid()\n",
        "plt.show()\n",
        "# Fuzzy C-Means clustering\n",
        "# Transpose the data for compatibility with skfuzzy\n",
        "X_transposed = np.transpose(X)\n",
        "# Set the number of clusters\n",
        "cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(\n",
        "X_transposed, c=n_clusters, m=2, error=0.005, maxiter=1000, init=None\n",
        ")\n",
        "# Assign clusters to each data point\n",
        "cluster_membership = np.argmax(u, axis=0)\n",
        "# Visualize clustered data\n",
        "colors = ['red', 'green', 'blue']\n",
        "for i in range(n_clusters):\n",
        "plt.scatter(X[cluster_membership == i, 0], X[cluster_membership == i, 1], color=colors[i],\n",
        "label=f\"Cluster {i+1}\")\n",
        "plt.title(\"Fuzzy K-Means Clustering\")\n",
        "plt.xlabel(\"Feature 1\")\n",
        "plt.ylabel(\"Feature 2\")\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.show()\n",
        "# Membership values for a specific point (example: first point in X)\n",
        "print(\"Membership values for the first data point:\", u[:, 0])\n",
        "# Fuzzy Partition Coefficient (FPC) - A measure of the quality of the clustering\n",
        "print(\"\\nFuzzy Partition Coefficient (FPC):\", fpc)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "id": "AHtP_IlFbkGu",
        "outputId": "d0fdcb84-0f87-4e80-b7d0-91d50da1e9b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "expected an indented block after 'for' statement on line 32 (<ipython-input-14-5aedc3aab8b5>, line 33)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-14-5aedc3aab8b5>\"\u001b[0;36m, line \u001b[0;32m33\u001b[0m\n\u001b[0;31m    plt.scatter(X[cluster_membership == i, 0], X[cluster_membership == i, 1], color=colors[i],\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block after 'for' statement on line 32\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import make_blobs\n",
        "import skfuzzy as fuzz\n",
        "# Generate synthetic dataset\n",
        "n_samples = 300\n",
        "n_features = 2\n",
        "n_clusters = 3\n",
        "random_state = 42\n",
        "# Creating a dataset\n",
        "X, _ = make_blobs(n_samples=n_samples, centers=n_clusters, n_features=n_features,\n",
        "random_state=random_state)\n",
        "# Visualize the dataset\n",
        "plt.scatter(X[:, 0], X[:, 1], c='blue', marker='o', edgecolor='k')\n",
        "plt.title(\"Generated Data Points\")\n",
        "plt.xlabel(\"Feature 1\")\n",
        "plt.ylabel(\"Feature 2\")\n",
        "plt.grid()\n",
        "plt.show()\n",
        "# Fuzzy C-Means clustering\n",
        "# Transpose the data for compatibility with skfuzzy\n",
        "X_transposed = np.transpose(X)\n",
        "# Set the number of clusters\n",
        "cntr, u, u0, d, jm, p, fpc = fuzz.cluster.cmeans(\n",
        "X_transposed, c=n_clusters, m=2, error=0.005, maxiter=1000, init=None\n",
        ")\n",
        "# Assign clusters to each data point\n",
        "cluster_membership = np.argmax(u, axis=0)\n",
        "# Visualize clustered data\n",
        "colors = ['red', 'green', 'blue']\n",
        "for i in range(n_clusters):\n",
        "    # Indented the following line to be part of the for loop\n",
        "    plt.scatter(X[cluster_membership == i, 0], X[cluster_membership == i, 1], color=colors[i],\n",
        "               label=f\"Cluster {i+1}\")\n",
        "plt.title(\"Fuzzy K-Means Clustering\")\n",
        "plt.xlabel(\"Feature 1\")\n",
        "plt.ylabel(\"Feature 2\")\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.show()\n",
        "# Membership values for a specific point (example: first point in X)\n",
        "print(\"Membership values for the first data point:\", u[:, 0])\n",
        "# Fuzzy Partition Coefficient (FPC) - A measure of the quality of the clustering\n",
        "print(\"\\nFuzzy Partition Coefficient (FPC):\", fpc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 981
        },
        "id": "OdbNcxpVhDt0",
        "outputId": "b5674c9b-1286-4f5f-a35a-8c8d11d0e8e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAj4AAAHHCAYAAAC/R1LgAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAhrJJREFUeJzt3Xl8U1X6x/FPCFvZpZStRUBRGQUVcQPpiIOIY8FiKSgoguPggijIJotDWxRQQSjirr9xBQRKB2QRB5iiRXAcFXTAURFBpeygLLKV9P7+OFmbpE1LS9rm+369+iq5ubk5N0X6eM5znsdmWZaFiIiISASoFO4BiIiIiJwtCnxEREQkYijwERERkYihwEdEREQihgIfERERiRgKfERERCRiKPARERGRiKHAR0RERCKGAh8RERGJGAp8RKRCaNGiBQMHDgz3MMq81NRUbDZbuIchEjYKfETCbNu2bQwZMoQLL7yQGjVqUKNGDS6++GIeeughvv7663APr0QtX76c1NTUsI7BZrO5vypXrkz9+vVp3749Q4cO5Ztvvin2dY8dO0Zqaipr1qwpucEC27dv9xmz3W7n3HPP5bbbbmPjxo0l+l6FWbduHampqfz2229n9X1FSpJNvbpEwmfp0qXcfvvtVK5cmTvvvJPLLruMSpUq8e2335KZmclPP/3Etm3baN68ebiHWiKGDBnCCy+8QGn8s9OiRQs6d+7Mm2++WeB5NpuNrl27cvfdd2NZFocOHeKrr75iwYIF/P777zz99NMMHz68yO+/f/9+YmJiSElJKdHgbvv27bRs2ZK+fftyyy234HA4+N///sdLL73EyZMn+fTTT7n88stDvt7p06c5ffo01atXL/JYpk2bxqhRo9i2bRstWrQo8utFyoLK4R6ASKTaunUrd9xxB82bN2f16tU0adLE5/mnn36aF198kUqVyu7E7O+//07NmjXDPYwiu/DCC7nrrrt8jj311FP06NGDESNG0Lp1a2655ZYwjS6wK664wmfM1113HbfeeisvvfQSr7zySsjXqVy5MpUr659+iVxl919UkQrumWee4ffff+eNN97wC3rA/IJ65JFHaNasmc/xb7/9luTkZOrXr0/16tW58soref/9933OefPNN7HZbHzyyScMHz6cmJgYatasyW233ca+ffv83uuDDz4gPj6emjVrUrt2bRISEti8ebPPOQMHDqRWrVps3bqVW265hdq1a3PnnXcCkJ2dTe/evTn33HOpVq0azZo149FHH+X48eM+r3/hhRcA3+Uml7y8PNLT07nkkkuoXr06jRo14v777+fXX3/1GYdlWTz55JPExcVRo0YNbrjhBr+xFkd0dDTvvfcelStXZtKkSe7jp06dYsKECbRv3566detSs2ZN4uPjycrKcp+zfft2YmJiAEhLS3Pfm2vm5+uvv2bgwIGcd955VK9encaNG/OXv/yFAwcOFHu8f/rTnwCzVOqyYMEC2rdvT1RUFA0aNOCuu+4iJyfH53WBcnxsNhtDhgxh0aJFtGnThmrVqnHJJZewYsUKn9eNGjUKgJYtW7rvcfv27QCsXLmSTp06Ua9ePWrVqsVFF13EuHHjin1/IqVFYb9ImCxdupRWrVpxzTXXhPyazZs3c9111xEbG8uYMWOoWbMm8+fPp2fPnixcuJDbbrvN5/yHH36Yc845h5SUFLZv3056ejpDhgxh3rx57nPeeecdBgwYQLdu3Xj66ac5duwYL730Ep06dWLDhg0+SxqnT5+mW7dudOrUiWnTplGjRg3A/MI9duwYDz74INHR0Xz22WfMmjWLHTt2sGDBAgDuv/9+du7cycqVK3nnnXf87u3+++/nzTff5J577uGRRx5h27ZtPP/882zYsIFPPvmEKlWqADBhwgSefPJJbrnlFm655Ra+/PJLbrrpJk6dOhXy5xjMueeey/XXX09WVhaHDx+mTp06HD58mNdff52+ffsyaNAgjhw5wv/93//RrVs3PvvsMy6//HJiYmJ46aWXePDBB7nttttISkoC4NJLLwVMUPDjjz9yzz330LhxYzZv3syrr77K5s2b+fTTT4uVbLx161bABGyA+7O76qqrmDJlCnv27GHmzJl88sknbNiwgXr16hV4vbVr15KZmcngwYOpXbs2zz33HL169eLnn38mOjqapKQkvv/+e+bOncuMGTNo0KABADExMWzevJnu3btz6aWXMnHiRKpVq8YPP/zAJ598UuT7Eil1loicdYcOHbIAq2fPnn7P/frrr9a+ffvcX8eOHXM/16VLF6tt27bWiRMn3Mfy8vKsjh07WhdccIH72BtvvGEB1o033mjl5eW5jz/66KOW3W63fvvtN8uyLOvIkSNWvXr1rEGDBvmMYffu3VbdunV9jg8YMMACrDFjxviN2XuMLlOmTLFsNpv1008/uY899NBDVqB/drKzsy3Amj17ts/xFStW+Bzfu3evVbVqVSshIcHnvsaNG2cB1oABA/yunR9gPfTQQ0GfHzp0qAVYX331lWVZlnX69Gnr5MmTPuf8+uuvVqNGjay//OUv7mP79u2zACslJcXvmoE+n7lz51qA9fHHHxc43m3btlmAlZaWZu3bt8/avXu3tWbNGqtdu3YWYC1cuNA6deqU1bBhQ6tNmzbW8ePH3a9dunSpBVgTJkxwH0tJSfH7GQBW1apVrR9++MF97KuvvrIAa9asWe5jU6dOtQBr27ZtPq+fMWOGBVj79u0r8F5EygItdYmEweHDhwGoVauW33OdO3cmJibG/eVaHjp48CD/+te/6NOnD0eOHGH//v3s37+fAwcO0K1bN7Zs2eK3rHHffff5zCbEx8fjcDj46aefADMT8dtvv9G3b1/39fbv34/dbueaa67xWc5xefDBB/2ORUVFuf/8+++/s3//fjp27IhlWWzYsKHQz2PBggXUrVuXrl27+oyjffv21KpVyz2OVatWcerUKR5++GGf+xo2bFih7xEq18/kyJEjANjtdqpWrQqY5biDBw9y+vRprrzySr788suQrun9+Zw4cYL9+/dz7bXXAoR8jZSUFGJiYmjcuDGdO3dm69atPP300yQlJfH555+zd+9eBg8e7JO0nJCQQOvWrVm2bFmh17/xxhs5//zz3Y8vvfRS6tSpw48//ljoa12zSYsXLyYvLy+k+xEJFy11iYRB7dq1ATh69Kjfc6+88gpHjhxhz549PsmsP/zwA5Zl8be//Y2//e1vAa+7d+9eYmNj3Y/PPfdcn+fPOeccAHfezJYtWwBPvkh+derU8XlcuXJl4uLi/M77+eefmTBhAu+//75fTs6hQ4cCXtvbli1bOHToEA0bNgz4/N69ewHcAdsFF1zg83xMTIz73s6U62fi+hkBvPXWWzz77LN8++235Obmuo+3bNkypGsePHiQtLQ03nvvPfe9uITy+YAJYnv37k2lSpWoV68el1xyCdWqVQM8n8tFF13k97rWrVuzdu3aQq+f/+8KmL8v+X+egdx+++28/vrr/PWvf2XMmDF06dKFpKQkkpOTy3RyvkQmBT4iYVC3bl2aNGnCpk2b/J5z5fy4kkZdXP8nPXLkSLp16xbwuq1a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YAIeb62BKOACTND0KdANMxPkut40YAAwgQMHPgl6bz169OCWW25h/fr17N69m5iYGAYMuJfc3M74dpVvDywA+gKvAVHs2rUr4DWL89mciYr8353urfyqCPcX6thtVv4yqOWEzWbjH//4Bz179gRg3bp1XHfddezcudOniWKfPn2w2WzMmzcv4HVSU1NJS0vzOz5nzhxq1KhRKmMXERGRknXs2DH69evHoUOHqFOnTtDzKsyMj6vY2Z49e3wCnz179nD55ZcHfd3YsWMZPny4+/Hhw4dp1qwZN910E3Xq1CE3N5eVK1fStWtXqlSpUmrjD4eKfG9Q8ve3du1aEhISgFWYvJT8PgO6smzZMjp16nTG71eQYPcWaPbCbq+Gw3EDvjMiYGrm9CM29hu+/noDdrsdh8Phnk3ZtWsXjz/+OIHvdwnQH/+Zm2cx29HfAXpgEo/7AZsxs0F7g1wPXJ9fVFQUf//730P6uWVkZHDvvfdimqLWDHDGUSAWuBSb7b+888477lkch8NB27aXk5NzCTCn0M+mpFTk/+50b+VXRbg/14pNYSpM4NOyZUsaN27M6tWr3YHO4cOH+fe//82DDz4Y9HXVqlWjWrVqfserVKni88PP/7giqcj3BiV3f7t37+b48ePApUCg610KHGf37t1n7fP0vjfXziqTZPwmJvn3bUyH9NGA/99zGMmWLR359NNPOXjwIEOHjnDm63jLf78OTD+uLphEZVfA0BGT1JzofL4h8DRmC3sqJp8n0PW83+c455zTwO/egmnSpInzZ/ItgatAfwscByZjs6X7JDl/8skn/PDDd5jPquDPpihVrENVkf+7072VX+X5/kIdd7lKbj569CgbN25k48aNgElo3rhxIz///DM2m41hw4bx5JNP8v777/Pf//6Xu+++m6ZNm7qXw0TORKi1ZLxnHM+W4N3Xz3GeUXDhv8WLFwfYtu4qG5H/frMprB+XeT4eM/vTHvBeUS/487vhhj8Ged5f4dvcp2AKJl7vV925KP3LlPwsUnGUq8Dn888/p127drRr1w6A4cOH065dOyZMmADA6NGjefjhh7nvvvu46qqrOHr0KCtWrKB69erhHLZUEKXd9uFMBG/psNj5veBg49135wYImmIwk8KT8L3f0AKGxx9/nPnz5xAXtx8z4wPQlGCtKszx2kXaHWe325kxY6pzO3si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J1KzZk0mTJjAFVdcwZIlS+jatWtpjLFIbr/9dvbt28eECRPYvXs3l19+OStWrKBRo0bhHpqIiEiFV9aLSYYc+Pz444+0bNkSm81GfHw8K1euLM1xnZEhQ4YwZMiQcA9DREQkIpXlYpIh5/hccMEF7Nu3z/349ttv90siFhERESnLQg588pf7Wb58Ob///nuJD0hERESktBR5V5eIiIhIeRVy4GOz2bDZbH7HRERERMqLkJObLcti4MCB7mJ/J06c4IEHHqBmzZo+52VmZpbsCEVERERKSMiBz4ABA3we33XXXSU+GBEREZHSFHLg88Ybb5TmOERERERKnZKbRUREJGIo8BEREZGIocBHREREIoYCHxEREYkYCnxEREQkYijwERERkYihwEdEREQihgIfERERiRgKfERERCRiKPARERGRiKHAR0RERCKGAh8RERGJGAp8REREJGIo8BEREZGIocBHREREIoYCHxEREYkYCnxEREQkYijwERERkYihwEdEREQihgIfERERiRgKfERERCRiKPARERGRiKHAR0RERCKGAh8RERGJGAp8REREJGIo8BEREZGIocBHREREIoYCHxEREYkYCnxEREQkYijwERERkYihwEdEREQihgIfERERiRgKfERERCRiKPARERGRiKHAR0RERCKGAh8RERGJGAp8REREJGIo8BEREZGIocBHREREIoYCHxEREYkYCnxEREQkYijwERERkYihwEdEREQihgIfERERiRgKfERERCRiKPARERGRiKHAR0RERCKGAh8RERGJGAp8REREJGIo8BEREZGIocBHREREIoYCHxEREYkYCnxEREQkYijwERERkYihwEdEREQiRuVwD0CkuBwOB9nZ2ezatYsmTZoQHx+P3W4P97BERKQMU+Aj5VJmZiZDh45gx47t7mNxcS2YOfNZkpKSwjcwEREp07TUJeVOZmYmycnJ7NjRFlgPHAHWk5PTluTkZDIzM8M8QhERKasU+Ei54nA4GDp0BJbVHVgEXAvUAq7FshYB3Rk2bCQOhyOMoxQRkbJKgY+UOQ6HgzVr1jB37lzWrFnjE8RkZ2c7l7fG4f/XtxKWNZZfftlGdnb2WRyxiIiUF8rxkTKlsNydXbt2OY+2CXIFc9xznoiIiIdmfKTMCCV3p0mTJs6zNwW5ijnepEkT90xRRkaG38yRiIhE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j1deeYXNmzczY8YMXn75ZcaNGxfuoRXZvHnzGD58OCkpKXz55ZdcdtlldOvWjb1794Z7aGfso48+4qGHHuLTTz9l5cqV5ObmctNNN/H777+He2gl6j//+Q+vvPIKl156abiHUiJ+/fVXrrvuOqpUqcIHH3zAN998w7PPPss555wT7qGVLksK9cYbb1h169b1O758+XKrUqVK1u7du93HXnrpJatOnTrWyZMnz+IIz9y+ffsswPr444/dxw4fPmwB1sqVK8M4sjOXm5trxcbGWq+//nq4h1Jqli9fbrVu3dravHmzBVgbNmwI95BKzTPPPGO1bNky3MMosquvvtp66KGH3I8dDofVtGlTa8qUKWEcVenYu3evBVgfffRRuIdSYo4cOWJdcMEF1sqVK63rr7/eGjp0aLiHdMYee+wxq1OnTuEexlmnGZ8zsH79etq2bUujRo3cx7p168bhw4fZvHlzGEdWdNHR0Vx00UW8/fbb/P7775w+fZpXXnmFhg0b0r59+3AP74x8+eWX5OTkUKlSJdq1a0eTJk3485//zKZNm8I9tBKxZ88eBg0axDvvvEONGjXCPZxSd+jQIerXrx/uYRTJqVOn+OKLL7jxxhvdxypVqsSNN97I+vXrwziy0nHo0CGAcvdzKshDDz1EQkKCz8+wvHv//fe58sor6d27Nw0bNqRdu3a89tpr4R5WqVPgcwZ2797tE/QA7sflbXnIZrOxatUqNmzYQO3atalevTrTp09nxYoV5X7a88cffwQgNTWVxx9/nKVLl3LOOefQuXNnDh48GObRnRnLshg4cCAPPPAAV155ZbiHU+p++OEHZs2axf333x/uoRTJ/v37cTgcAf+9KG//VhQmLy+PYcOGcd1119GmTZtwD6dEvPfee3z55ZdMmTIl3EMpUT/++CMvvfQSF1xwAR9++CEPPvggjzzyCG+99Va4h1aqIi7wGTNmDDabrcCvb7/9NtzDLDGh3q9lWTz00EM0bNiQ7OxsPvvsM3r27EmPHj3YtWtXuG8joFDvLS8vD4Dx48fTq1cv2rdvzxtvvIHNZmPBggVhvovAQr23WbNmceTIEcaOHRvuIRdJcf47zMnJ4eabb6Z3794MGjQoTCOXwjz00ENs2rSJ9957L9xDKRG//PILQ4cOZfbs2VSvXj3cwylReXl5XHHFFUyePJl27dpx3333MWjQIF5++eVwD61UVQ73AM62ESNGMHDgwALPOe+880K6VuPGjf12ZezZs8f9XFkQ6v3+61//YunSpfz666/UqVMHgBdffJGVK1fy1ltvMWbMmLMw2qIJ9d5cgdvFF1/sPl6tWjXOO+88fv7559IcYrEV5ee2fv16v/46V155JXfeeWeZ/T+3ov53uHPnTm644QY6duzIq6++WsqjK3kNGjTAbre7/31w2bNnT5n5t6IkDBkyhKVLl/Lxxx8TFxcX7uGUiC+++IK9e/dyxRVXuI85HA4+/vhjnn/+eU6ePIndbg/jCIuvSZMmPv8uAvzhD39g4cKFYRrR2RFxgU9MTAwxMTElcq0OHTowadIk9u7dS8OGDQFYuXIlderU8fvLFC6h3u+xY8cAk3fgrVKlSu4Zk7Im1Htr37491apV47vvvqNTp04A5Obmsn37dpo3b17awyyWUO/tueee48knn3Q/3rlzJ926dWPevHlcc801pTnEM1KU/w5zcnK44YYb3DN1+f+OlgdVq1alffv2rF692l1GIS8vj9WrVzNkyJDwDq4EWJbFww8/zD/+8Q/WrFlDy5Ytwz2kEtOlSxf++9//+hy75557aN26NY899li5DXoArrvuOr+yA99//32Z/XexxIQ5ubpM++mnn6wNGzZYaWlpVq1atawNGzZYGzZssI4cOWJZlmWdPn3aatOmjXXTTTdZGzdutFasWGHFxMRYY8eODfPIi27fvn1WdHS0lZSUZG3cuNH67rvvrJEjR1pVqlSxNm7cGO7hnbGhQ4dasbGx1ocffmh9++231r333ms1bNjQOnjwYLiHVqK2bdtWoXZ17dixw2rVqpXVpUsXa8eOHdauXbvcX+XNe++9Z1WrVs168803rW+++ca67777rHr16vnsCi2vHnzwQatu3brWmjVrfH5Gx44dC/fQSkVF2dX12WefWZUrV7YmTZpkbdmyxZo9e7ZVo0YN69133w330EqVAp8CDBgwwAL8vrKystznbN++3frzn/9sRUVFWQ0aNLBGjBhh5ebmhm/QZ+A///mPddNNN1n169e3ateubV177bXW8uXLwz2sEnHq1ClrxIgRVsOGDa3atWtbN954o7Vp06ZwD6vEVbTA54033gj432B5/X+2WbNmWeeee65VtWpV6+qrr7Y+/fTTcA+pRAT7Gb3xxhvhHlqpqCiBj2VZ1pIlS6w2bdpY1apVs1q3bm29+uqr4R5SqbNZlmWd5UkmERERkbAof4vlIiIiIsWkwEdEREQihgIfERERiRgKfERERCRiKPARERGRiKHAR0RERCKGAh8RERGJGAp8REREJGIo8BGRs2rgwIEBu7H/8MMPJXL9N998k3r16pXItYrr448/pkePHjRt2hSbzcaiRYvCOh4R8VDgIyJn3c0338yuXbt8vspiY8vc3Nxive7333/nsssu44UXXijhEYnImVLgIyJnXbVq1WjcuLHPl6vL9eLFi7niiiuoXr065513HmlpaZw+fdr92unTp9O2bVtq1qxJs2bNGDx4MEePHgVgzZo13HPPPRw6dMg9k5SamgoQcOalXr16vPnmmwBs374dm83GvHnzuP7666levTqzZ88G4PXXX+cPf/gD1atXp3Xr1rz44osF3t+f//xnnnzySW677bYS+LREpCRVDvcARERcsrOzufvuu3nuueeIj49n69at3HfffQCkpKQAUKlSJZ577jlatmzJjz/+yODBgxk9ejQvvvgiHTt2JD09nQkTJvDdd98BUKtWrSKNYcyYMTz77LO0a9fOHfxMmDCB559/nnbt2rFhwwYGDRpEzZo1GTBgQMl+ACJS+sLdJVVEIsuAAQMsu91u1axZ0/2VnJxsWZZldenSxZo8ebLP+e+8847VpEmToNdbsGCBFR0d7X78xhtvWHXr1vU7D7D+8Y9/+ByrW7euu4O4q7N9enq6zznnn3++NWfOHJ9jTzzxhNWhQ4fCbjXo+4pI+GjGR0TOuhtuuIGXXnrJ/bhmzZoAfPXVV3zyySdMmjTJ/ZzD4eDEiRMcO3aMGjVqsGrVKqZMmcK3337L4cOHOX36tM/zZ+rKK690//n3339n69at3HvvvQwaNMh9/PTp09StW/eM30tEzj4FPiJy1tWsWZNWrVr5HT969ChpaWkkJSX5PVe9enW2b99O9+7defDBB5k0aRL169dn7dq13HvvvZw6darAwMdms2FZls+xQMnLriDMNR6A1157jWuuucbnPFdOkoiULwp8RKTMuOKKK/juu+8CBkUAX3zxBXl5eTz77LNUqmT2ZsyfP9/nnKpVq+JwOPxeGxMTw65du9yPt2zZwrFjxwocT6NGjWjatCk//vgjd955Z1FvR0TKIAU+IlJmTJgwge7du3PuueeSnJxMpUqV+Oqrr9i0aRNPPvkkrVq1Ijc3l1mzZtGjRw8++eQTXn75ZZ9rtGjRgqNHj7J69Wouu+wyatSoQY0aNfjTn/7E888/T4cOHXA4HDz22GNUqVKl0DGlpaXxyCOPULduXW6++WZOnjzJ559/zq+//srw4cMDvubo0aM+dYm2bdvGxo0bqV+/Pueee+6ZfUgicmbCnWQkIpFlwIABVmJiYtDnV6xYYXXs2NGKioqy6tSpY1199dXWq6++6n5++vTpVpMmTayoqCirW7du1ttvv20B1q+//uo+54EHHrCio6MtwEpJSbEsy7JycnKsm266yapZs6Z1wQUXWMuXLw+Y3Lxhwwa/Mc2ePdu6/PLLrapVq1rnnHOO9cc//tHKzMwMeg9ZWVkW4Pc1YMCAInxSIlIabJaVb9FbREREpIJSAUMRERGJGAp8REREJGIo8BEREZGIocBHREREIoYCHxEREYkYCnxEREQkYijwERERkYihwEdEREQihgIfERERiRgKfERERCRiKPARERGRiKHAR0RERCLG/wMcgppG9q+fdQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Membership values for the first data point: [0.9945126  0.00242899 0.0030584 ]\n",
            "\n",
            "Fuzzy Partition Coefficient (FPC): 0.9579230573847614\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**exp 8.1**"
      ],
      "metadata": {
        "id": "TlsleFTAaMPB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.cluster.hierarchy import linkage, dendrogram #\n",
        "#Generate example data\n",
        "np.random.seed(42)\n",
        "X = np.array([[2, 5], [3, 3], [5, 8], [8, 5], [10, 6]])\n",
        "# Perform hierarchical clustering using linkage function\n",
        "linkage_matrix = linkage(X, method='complete', metric='euclidean') # Plot the\n",
        "dendrogram(linkage_matrix, labels=['A', 'B', 'C', 'D', 'E'])\n",
        "plt.title('Hierarchical Clustering Dendrogram')\n",
        "plt.xlabel('Data Points')\n",
        "plt.ylabel('Euclidean Distance')\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.cluster.hierarchy import linkage, dendrogram #\n",
        "#Generate example data\n",
        "np.random.seed(42)\n",
        "X = np.array([[2, 5], [3, 3], [5, 8], [8, 5], [10, 6]])\n",
        "# Perform hierarchical clustering using linkage function\n",
        "linkage_matrix = linkage(X, method='complete', metric='euclidean') # Plot the\n",
        "dendrogram(linkage_matrix, labels=['A', 'B', 'C', 'D', 'E'])\n",
        "plt.title('Hierarchical Clustering Dendrogram')\n",
        "plt.xlabel('Data Points')\n",
        "plt.ylabel('Euclidean Distance')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "9hmo4vQ5hOa7",
        "outputId": "4ac9debd-eb32-4a24-f9a9-5cc5eaf406fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "exp **8.2**"
      ],
      "metadata": {
        "id": "QvfY5ktIaVdE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.cluster import AgglomerativeClustering\n",
        "from scipy.cluster.hierarchy import dendrogram, linkage\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Generate example data\n",
        "np.random.seed(42)\n",
        "X = np.array([[2, 5], [3, 3], [5, 8], [8, 5], [10, 6]])\n",
        "\n",
        "# Agglomerative clustering with complete linkage\n",
        "agg_cluster_complete = AgglomerativeClustering(n_clusters=None,\n",
        "                                              distance_threshold=0,\n",
        "                                              linkage='complete')\n",
        "agg_labels_complete = agg_cluster_complete.fit_predict(X)\n",
        "\n",
        "# Plot dendrogram for complete linkage\n",
        "linkage_matrix_complete = linkage(X, method='complete')\n",
        "dendrogram(linkage_matrix_complete, labels=['A', 'B', 'C', 'D', 'E'])\n",
        "plt.title('Agglomerative Clustering (Complete Linkage)')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "1W2Us0oPoqzb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 456
        },
        "outputId": "8ac95e6d-c875-4420-cfdf-2740285e9c6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IYOvvJSuX4Z1"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}